{"version":3,"file":"titlecase.js","mappings":"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","sources":["webpack://titlecase-js/./src/TitleCaseConsts.js","webpack://titlecase-js/./src/TitleCaseHelper.js","webpack://titlecase-js/./src/TitleCaser.js","webpack://titlecase-js/./src/index.js"],"sourcesContent":["export const COMMON_ABBREVIATIONS = [\n    // Articles and prepositions, conjunctions: Includes abbreviations for articles and prepositions, conjunctions, and subordinating conjunctions.\n    'a', 'an', 'the', 'as', 'at', 'by', 'for', 'in', 'of', 'on', 'to', 'up', 'yet', 'so', 'but', 'nor', 'or', 'and',\n];\n\nexport const CORRECT_TITLE_CASE = [\n    // Web Technologies\n    'AJAX', 'CSS', 'DOM', 'ES6', 'HTML', 'JavaScript', 'jQuery', 'MobX', 'SCSS', 'TypeScript', 'Vue.js', '.NET', 'ASP', 'ASPX', 'MySQL', 'PHP', 'PostgreSQL', 'Python', 'SQL', 'GraphQL', 'HTML5',\n\n    //  Acronyms/Abbreviations:\n    'API', 'APIs', 'ASCII', 'CI', 'CircleCI', 'CLI', 'DLL', 'DNS', 'EC2', 'FTP', 'HTTP', 'HTTPs', 'ICMP', 'IDE', 'IP', 'ISP', 'JSON', 'JSP', 'LPWAN', 'M2M', 'MQTT', 'OOP', 'REST', 'SSH', 'SSL', 'TCP', 'UDP', 'URL', 'WLAN', 'WYSIWYG', 'XML', 'YAML', 'YML', 'IMAP', 'RSS', 'IaaS', 'PaaS', 'SaaS', 'CaaS', 'FaaS', 'XaaS', 'RaaS',\n    'IoE', 'IoT', 'LoRa', 'NB-IoT', 'RFID', 'RF', 'RFI', 'RFQ', 'ECMAScript', 'IO', 'I/O', 'DevOps', 'SecOps', 'DDoS', 'VoIP',\n\n    // Misc.\n    'AI', 'AR', 'ML', 'VR',\n\n    // 'eTerms'\n    'e-Book', 'e-Books', 'eBook', 'eBooks', 'eCommerce', 'eMarket', 'eMarketplace', 'eMarketplaces', 'eMarkets', 'eReader', 'eShop', 'eShops', 'eStore', 'eStores', 'E-commerce',\n\n    // Accounting terms\n    'AP', 'AR', 'COGS', 'EBIT', 'EPS', 'FIFO', 'GAAP', 'LIFO', 'P&L', 'ROI', 'SOX', 'TCO', 'VAT',\n\n    // Investment terms\n    'CAGR', 'DCF', 'ETF', 'IPO', 'IRR', 'M&A', 'NAV', 'PE', 'PEG', 'PPE', 'ROE', 'S&P', 'TVM', 'VC',\n\n    // Marketing terms\n    'B2B', 'B2C', 'CMO', 'CPA', 'CPC', 'CPL', 'CPM', 'CRM', 'CTA', 'CTR', 'SEO', 'SEM', 'SMM', 'USP', 'A/B', 'CTA', 'CTOR', 'CTR', 'KPI', 'PWA', 'SEM', 'SERP', 'SERPs', 'SMM', 'SMO', 'FAQ', 'FAQA', 'FAQS', 'UI', 'UI/UX', 'UX', 'T&C', 'TOS', 'PP', 'CRM', 'PoE', 'PoW', 'PoC', 'A11Y', 'PR',\n\n    // Sales terms\n    'BANT', 'GAP', 'KPI', 'MQL', 'NPS', 'POS', 'SPIN', 'SQL', 'SWOT',\n\n    // Legal terms\n    'AFA', 'ADR', 'CCPA', 'CFAA', 'CISG', 'DMCA', 'EULA', 'GDPR', 'HIPAA', 'NDA', 'SOW', 'TOS',\n\n    // Roles and titles\n    'CEO', 'CEOs', 'CFO', 'CFOs', 'CIO', 'CIOs', 'CMO', 'CMOs', 'COO', 'COOs', 'CPO', 'CPOs', 'CRO', 'CROs', 'CSO', 'CSOs', 'CTO', 'CTOs', 'EVP', 'EVPs', 'HR', 'HRs', 'SVP', 'SVPs', 'VP', 'VPs',\n\n    // Non-profit organizations\n    'NGO', 'NPO', 'NGOs', 'NPOs', 'UN', 'UNESCO', 'UNICEF', 'UNHCR', 'UNODC', 'UNDP', 'UNFPA', 'UNEP',\n\n    // Brands:\n    'IKEA', 'Facebook', 'YouTube', 'Instagram', 'Twitter', 'Google', 'TensorFlow', 'Microsoft', 'Amazon', 'Netflix', 'LinkedIn', 'Airbnb', 'eBay', 'iPhone', 'iPad', 'iPod', 'PlayStation', 'PayPal', 'GitHub', 'GitLab', 'Salesforce', 'CodeIgniter', 'WordPress', 'WooCommerce', 'MongoDB', 'JIRA', 'HubSpot', 'AirDrop', 'AirPlay', 'AirPods', 'AirTags', 'FinalCut', 'GarageBand', 'iBooks', 'iCloud', 'iLife', 'iMac', 'iMessage', 'iMovie', 'iPhoto', 'iPod', 'iTunes', 'iWatch', 'iWork', 'iWork', 'LogicPro', 'macOS', 'ProTools', 'QuickTime', 'AdWords', 'AdSense', 'TikTok', 'Uber', 'Dropbox', 'Slack', 'Trello', 'Zoom', 'Twitch', 'Snapchat', 'WhatsApp', 'Telegram', 'Discord', 'Reddit', 'Quora', 'StackOverflow', 'StackExchange', 'Coca-Cola', 'AWS', 'GCP', 'VMware',\n\n    // Sports\n    'NBA', 'NCAA', 'NFL', 'WWE', 'WWF', 'FIFA',\n\n    // Time-related, numbers, and measurements: Includes abbreviations for time-related terms, numbers, and measurements.\n    'a.m.', 'p.m.', 'ca.', 'cc.', 'fig.', 'pl.', 'pt.', 'rev.', 'sr.', 'v.', 'vol.', 'et al.', 'pp.', 'p.',\n\n    // Professional abbreviations, degrees, and titles: Includes abbreviations for professional titles, degrees, and certifications.\n    'ph.d.', 'm.d.', 'd.d.s.', 'd.m.d.', 'd.o.', 'd.c.', 'd.v.m.', 'd.n.p.', 'd.p.m.', 'd.s.w.', 'd.s.n.', 'd.n.sc.', 'd.n.a.', 'd.n.t.', 'd.n.p.t.', 'd.n.o.', 'd.n.m.', 'd.n.e.', 'd.n.s.', 'd.n.p.s.',\n\n    // Academic & literary abbreviations: Includes abbreviations for academic and literary terms, such as 'ed.' for 'edition' and 'vol.' for 'volume'.\n    'adj.', 'adv.', 'cf.', 'cm.', 'co.', 'corp.', 'dept.', 'dist.', 'ed.', 'edn.', 'esp.', 'etc.', 'ex.', 'i.e.', 'e.g.', 'op. cit.', 'vs.',\n\n    // Commercial\n    'Ltd.', 'Co.', 'Inc.', 'St.', 'Ave.', 'Bldg.', 'No.',\n\n    // Misc:\n    'w/', 'w/o'\n];\n\nexport const replaceCasing = [\n    { 'phd': 'ph.d.' },\n    { 'f.y.i': 'FYI' },\n    { 't.b.d': 'TBD' },\n    { 'a.k.a': 'AKA' },\n    { 'a.s.a.p': 'ASAP' },\n    { 'd.i.y': 'DIY' },\n    { 'f.a.q': 'FAQ' },\n    { 'f.a.q.s': 'FAQs' },\n    { 'f.a.q.a': 'FAQs' },\n    { 'angularjs': 'Angular.js' },\n    { 'reactjs': 'React.js' },\n    { 'vuejs': 'Vue.js' },\n    { 'nextjs': 'Next.js' },\n    { 'nuxtjs': 'Nuxt.js' },\n    { 'nodejs': 'Node.js' },\n    { 'full-stack': 'Fullstack' },\n    { 'front-end': 'Frontend' },\n    { 'back-end': 'Backend' },\n    { 'e-book': 'eBook' },\n    { 'e-books': 'eBooks' },\n    { 'e-commerce': 'eCommerce' },\n    { 'ecommerce': 'eCommerce' },\n    { 'ecom': 'eCommerce' }\n];\n\nexport const TITLE_CASE_STYLES = Object.freeze({\n    AP: 'ap',\n    APA: 'apa',\n    BRITISH: 'british',\n    CHICAGO: 'chicago',\n    NYT: 'nyt',\n    WIKIPEDIA: 'wikipedia'\n});\nexport const ALLOWED_TITLE_CASE_STYLES = Object.values(TITLE_CASE_STYLES);\nexport const TITLE_CASE_DEFAULT_OPTIONS = Object.freeze({\n    ap: {\n        shortConjunctions: ['and', 'but', 'or', 'for', 'nor', 'yet', 'so'],\n        articles: ['a', 'an', 'the'],\n        shortPrepositions: ['as', 'at', 'by', 'in', 'of', 'on', 'to', 'up', 'via'],\n        neverCapitalized: []\n    },\n    apa: {\n        shortConjunctions: ['and', 'as', 'but', 'by', 'for', 'in', 'nor', 'of', 'on', 'or', 'so', 'to', 'yet'],\n        articles: ['a', 'an', 'the'],\n        shortPrepositions: ['as', 'at', 'by', 'for', 'in', 'of', 'on', 'to', 'up', 'via'],\n        neverCapitalized: []\n    },\n    british: {\n        shortConjunctions: ['and', 'but', 'or', 'for', 'nor', 'yet', 'so'],\n        articles: ['a', 'an', 'the'],\n        shortPrepositions: ['as', 'at', 'by', 'in', 'of', 'on', 'to', 'up', 'via'],\n        neverCapitalized: []\n    },\n    chicago: {\n        shortConjunctions: ['and', 'but', 'or', 'for', 'nor', 'yet', 'so'],\n        articles: ['a', 'an', 'the'],\n        shortPrepositions: ['as', 'at', 'by', 'for', 'in', 'of', 'on', 'to', 'up', 'with', 'via'],\n        neverCapitalized: ['etc.']\n    },\n    nyt: {\n        shortConjunctions: ['and', 'but', 'or', 'for', 'nor', 'yet', 'so'],\n        articles: ['a', 'an', 'the'],\n        shortPrepositions: ['as', 'at', 'by', 'in', 'of', 'on', 'to', 'up', 'via'],\n        neverCapitalized: []\n    },\n    wikipedia: {\n        shortConjunctions: ['and', 'as', 'but', 'for', 'if', 'nor', 'or', 'so', 'yet'],\n        articles: ['a', 'an', 'the'],\n        shortPrepositions: ['as', 'at', 'by', 'in', 'of', 'on', 'to', 'up', 'via'],\n        neverCapitalized: []\n    },\n});\n\nexport const IGNORED_WORDS = [];\nexport const ignorePhrases = [];\n\nexport const CORRECT_PHRASE_CASE = [\n    'The Cybersmile Foundation',\n    'CO. by Colgate',\n];\n\nexport const ARR_UNIQUE_TERMS = [];\nexport const ARR_CORRECT_CAPITALIZED = [];","import {\n    ALLOWED_TITLE_CASE_STYLES,\n    TITLE_CASE_DEFAULT_OPTIONS,\n    replaceCasing,\n    CORRECT_TITLE_CASE,\n    IGNORED_WORDS,\n}\nfrom \"./TitleCaseConsts.js\";\n\nexport default class TitleCaseHelper {\n    static titleCaseOptionsCache = new Map();\n    static getTitleCaseOptions(options = {}, lowercaseWords = []) {\n        const cacheKey = JSON.stringify({\n            options,\n            lowercaseWords\n        });\n        \n        if (TitleCaseHelper.titleCaseOptionsCache.has(cacheKey)) {\n            return TitleCaseHelper.titleCaseOptionsCache.get(cacheKey);\n        }\n        \n        const mergedOptions = {\n            ...TITLE_CASE_DEFAULT_OPTIONS[options.style || \"ap\"],\n            ...options\n        };\n        const mergedArticles = mergedOptions.articles.concat(lowercaseWords)\n            .filter((word, index, array) => array.indexOf(word) === index);\n        const mergedShortConjunctions = mergedOptions.shortConjunctions.concat(lowercaseWords)\n            .filter((word, index, array) => array.indexOf(word) === index);\n        const mergedShortPrepositions = mergedOptions.shortPrepositions.concat(lowercaseWords)\n            .filter((word, index, array) => array.indexOf(word) === index);\n        const mergedReplaceTerms = [\n            ...(mergedOptions.replaceTerms || [])\n            .map(([key, value]) => [key.toLowerCase(), value]),\n            ...replaceCasing,\n        ];\n        \n        const result = {\n            articles: mergedArticles,\n            shortConjunctions: mergedShortConjunctions,\n            shortPrepositions: mergedShortPrepositions,\n            neverCapitalized: [...mergedOptions.neverCapitalized],\n            replaceTerms: mergedReplaceTerms,\n        };\n        \n        TitleCaseHelper.titleCaseOptionsCache.set(cacheKey, result);\n        return result;\n    }\n    \n    static isNeverCapitalizedCache = new Map();\n    \n    static isShortConjunction(word, style) {\n        const shortConjunctions = [...TitleCaseHelper.getTitleCaseOptions({\n                style: style\n            })\n            .shortConjunctions\n        ];\n        const wordLowerCase = word.toLowerCase();\n        return shortConjunctions.includes(wordLowerCase);\n    }\n    \n    static isArticle(word, style) {\n        const articles = TitleCaseHelper.getTitleCaseOptions({\n                style: style\n            })\n            .articles;\n        return articles.includes(word.toLowerCase());\n    }\n    \n    static isShortPreposition(word, style) {\n        const {\n            shortPrepositions\n        } = TitleCaseHelper.getTitleCaseOptions({\n            style: style\n        });\n        return shortPrepositions.includes(word.toLowerCase());\n    }\n    \n    static isNeverCapitalized(word, style) {\n        const cacheKey = `${style}_${word.toLowerCase()}`;\n        \n        if (TitleCaseHelper.isNeverCapitalizedCache.has(cacheKey)) {\n            return TitleCaseHelper.isNeverCapitalizedCache.get(cacheKey);\n        }\n        \n        const {\n            neverCapitalized\n        } = TitleCaseHelper.getTitleCaseOptions({\n            style\n        });\n        \n        const result = neverCapitalized.includes(word.toLowerCase());\n        TitleCaseHelper.isNeverCapitalizedCache.set(cacheKey, result);\n        \n        return result;\n    }\n    \n    static isShortWord(word, style) {\n        if (typeof word !== \"string\") {\n            throw new TypeError(`Invalid input: word must be a string. Received ${typeof word}.`);\n        }\n        \n        if (!ALLOWED_TITLE_CASE_STYLES.includes(style)) {\n            throw new Error(`Invalid option: style must be one of ${ALLOWED_TITLE_CASE_STYLES.join(\", \")}.`);\n        }\n        \n        return TitleCaseHelper.isShortConjunction(word, style) ||\n            TitleCaseHelper.isArticle(word, style) ||\n            TitleCaseHelper.isShortPreposition(word, style) ||\n            TitleCaseHelper.isNeverCapitalized(word, style);\n    }\n    \n    static hasNumbers(word) {\n        return /\\d/.test(word);\n    }\n    \n    static hasUppercaseMultiple(word) {\n        let count = 0;\n        for (let i = 0; i < word.length && count < 2; i++) {\n            if (/[A-Z]/.test(word[i])) {\n                count++;\n            }\n        }\n        return count >= 2;\n    }\n    \n    static hasUppercaseIntentional(word) {\n        return /[A-Z]/.test(word.slice(1)) && /[a-z]/.test(word.slice(0, -1));\n    }\n    \n    static hasSuffix(word) {\n        const suffix = \"'s\";\n        return word.length > suffix.length && word.endsWith(suffix);\n    }\n    \n    static hasApostrophe(word) {\n        return word.indexOf(\"'\") !== -1;\n    }\n    \n    static hasHyphen(word) {\n        return word.indexOf('-') !== -1 || word.indexOf('–') !== -1 || word.indexOf('—') !== -1;\n    }\n    \n    static hasRomanNumeral(word) {\n        if (typeof word !== 'string' || word === '') {\n            throw new TypeError('Invalid input: word must be a non-empty string.');\n        }\n        \n        const romanNumeralRegex = /^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/i;\n        return romanNumeralRegex.test(word);\n    }\n    \n    static hasHyphenRomanNumeral(word) {\n        if (typeof word !== \"string\" || word === \"\") {\n            throw new TypeError(\"Invalid input: word must be a non-empty string.\");\n        }\n        \n        const parts = word.split(\"-\");\n        for (let i = 0; i < parts.length; i++) {\n            if (!TitleCaseHelper.hasRomanNumeral(parts[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    static hasHtmlBreak(word) {\n        if (word === \"nl2br\") {\n            return true;\n        }\n        \n        return false;\n    }\n    \n    static startsWithSymbol(word) {\n        if (typeof word !== 'string') {\n            throw new Error(`Parameter 'word' must be a string. Received '${typeof word}' instead.`);\n        }\n        \n        if (word.length === 0) {\n            return false;\n        }\n        \n        const firstChar = word.charAt(0);\n        \n        return (\n            firstChar === '#' ||\n            firstChar === '@' ||\n            firstChar === '.'\n        );\n    }\n    \n    static endsWithSymbol(word, symbols = [\".\", \",\", \";\", \":\", \"?\", \"!\"]) {\n        if (typeof word !== \"string\" || !Array.isArray(symbols))\n            throw new Error(\"Invalid arguments\");\n        return symbols.some(symbol => word.endsWith(symbol)) || symbols.includes(word.slice(-2));\n    }\n    \n    static isWordIgnored(word, ignoredWords = IGNORED_WORDS) {\n        if (!Array.isArray(ignoredWords)) {\n            throw new TypeError(\"Invalid input: ignoredWords must be an array.\");\n        }\n        \n        if (typeof word !== \"string\" || word.trim() === \"\") {\n            throw new TypeError(\"Invalid input: word must be a non-empty string.\");\n        }\n        \n        const lowercasedWord = word.toLowerCase()\n            .trim();\n        \n        return ignoredWords.includes(lowercasedWord);\n    }\n    \n    static isWordInArray(targetWord, wordList) {\n        if (!Array.isArray(wordList)) {\n            return false;\n        }\n        \n        return wordList.some((word) => word.toLowerCase() === targetWord.toLowerCase());\n    }\n    \n    static getCorrectTitleCasing(word, includeApostrophe = false) {\n        if (!word) {\n            throw new Error('Word is empty.');\n        }\n        \n        const lowerCaseWord = word.toLowerCase();\n        const uniqueTermsIndex = CORRECT_TITLE_CASE.findIndex((w) => w.toLowerCase() === lowerCaseWord);\n        \n        if (uniqueTermsIndex >= 0) {\n            const correctCase = CORRECT_TITLE_CASE[uniqueTermsIndex];\n            if (includeApostrophe && lowerCaseWord.endsWith(\"'s\")) {\n                return `${correctCase}'s`;\n            }\n            else {\n                return correctCase;\n            }\n        }\n        \n        if (includeApostrophe && lowerCaseWord.endsWith(\"'s\")) {\n            const baseWord = lowerCaseWord.slice(0, -2);\n            const titleCaseBase = getCorrectTitleCasing(baseWord, true);\n            return `${titleCaseBase}'s`;\n        }\n        \n        return lowerCaseWord.charAt(0)\n            .toUpperCase() + lowerCaseWord.slice(1);\n    }\n    \n    static replaceTerm(word, replaceTermsObj) {\n        if (typeof word !== \"string\" || word === \"\") {\n            throw new TypeError(\"Invalid input: word must be a non-empty string.\");\n        }\n        \n        if (typeof replaceTermsObj !== \"object\" || replaceTermsObj === null) {\n            throw new TypeError(\n                \"Invalid input: replaceTermsObj must be a non-null object.\"\n            );\n        }\n        \n        const lowercasedWord = word.toLowerCase();\n        \n        if (lowercasedWord in replaceTermsObj) {\n            return replaceTermsObj[lowercasedWord];\n        }\n        \n        if (word in replaceTermsObj) {\n            return replaceTermsObj[word];\n        }\n        \n        if (word.toUpperCase() in replaceTermsObj) {\n            return replaceTermsObj[word.toUpperCase()];\n        }\n        \n        return word;\n    }\n    \n    static correctSuffix(word, correctTerms) {\n        const suffix = \"'s\";\n        const lowerCasedWord = word.toLowerCase();\n        \n        if (lowerCasedWord.endsWith(suffix)) {\n            const wordWithoutSuffix = word.slice(0, -suffix.length);\n            const matchingIndex = correctTerms.findIndex(\n                (term) => term.toLowerCase() === wordWithoutSuffix.toLowerCase()\n            );\n\n            if (matchingIndex >= 0) {\n                const correctCase = correctTerms[matchingIndex];\n                return correctCase + suffix;\n            } else {\n                const firstLetter = wordWithoutSuffix.charAt(0);\n                const capitalizedWord = firstLetter.toUpperCase() + wordWithoutSuffix.slice(1);\n                return capitalizedWord + suffix;\n            }\n        }\n\n        return word;\n    }\n    \n    static correctTerm(word, correctTerms) {\n        if (typeof word !== \"string\" || word === \"\") {\n            throw new TypeError(\"Invalid input: word must be a non-empty string.\");\n        }\n        \n        if (!correctTerms || !Array.isArray(correctTerms)) {\n            throw new TypeError(\"Invalid input: correctTerms must be an array.\");\n        }\n        \n        const parts = word.split(/[-']/);\n        const numParts = parts.length;\n        \n        for (let i = 0; i < numParts; i++) {\n            const lowercasedPart = parts[i].toLowerCase();\n            const index = correctTerms.findIndex((t) => t.toLowerCase() === lowercasedPart);\n            if (index >= 0) {\n                parts[i] = correctTerms[index];\n            }\n        }\n        \n        return parts.join(/[-']/);\n    }\n    \n    static correctTermHyphenated(word, style) {\n        const hyphenatedWords = word.split(\"-\");\n        const capitalizeFirst = (word) => word.charAt(0)\n            .toUpperCase() + word.slice(1);\n        const lowercaseRest = (word) => word.charAt(0) + word.slice(1)\n            .toLowerCase();\n        \n        const styleFunctions = {\n            ap: (word, index) => (index === 0 ? capitalizeFirst(word) : lowercaseRest(word)),\n            chicago: capitalizeFirst,\n            apa: (word, index, length) => {\n                if (isShortWord(word, style) && index > 0 && index < length - 1) {\n                    return word.toLowerCase();\n                }\n                else {\n                    return capitalizeFirst(word);\n                }\n            },\n            nyt: (word, index) => (index === 0 ? capitalizeFirst(word) : lowercaseRest(word)),\n            wikipedia: (word, index) => (index === 0 ? capitalizeFirst(word) : lowercaseRest(word)),\n        };\n        \n        const processWord = styleFunctions[style] || lowercaseRest;\n        const processedWords = hyphenatedWords.map((word, i) => {\n            let correctedWord = word;\n            const lowerCaseWord = word.toLowerCase();\n            const uniqueTermsIndex = CORRECT_TITLE_CASE.findIndex((w) => w.toLowerCase() === lowerCaseWord);\n            if (uniqueTermsIndex >= 0) {\n                correctedWord = CORRECT_TITLE_CASE[uniqueTermsIndex];\n            }\n            else if (lowerCaseWord.endsWith(\"'s\")) {\n                const rootWord = lowerCaseWord.substring(0, lowerCaseWord.length - 2);\n                const rootWordIndex = CORRECT_TITLE_CASE.findIndex((w) => w.toLowerCase() === rootWord);\n                if (rootWordIndex >= 0) {\n                    correctedWord = `${CORRECT_TITLE_CASE[rootWordIndex]}'s`;\n                }\n            }\n            return processWord(correctedWord, i, hyphenatedWords.length);\n        });\n        \n        return processedWords.join(\"-\");\n    }\n}\n\n// export default class TitleCaseValidator {\n//     static validateOption(key, value) {\n//         if (!Array.isArray(value)) {\n//             throw new TypeError(`Invalid option: ${key} must be an array`);\n//         }\n//         if (!value.every((word) => typeof word === \"string\")) {\n//             throw new TypeError(`Invalid option: ${key} must be an array of strings`);\n//         }\n//     }\n\n//     static validateOptions(options) {\n//         for (const key of Object.keys(options)) {\n//             if (key === 'style') {\n//                 if (typeof options.style !== 'string') {\n//                     throw new TypeError(`Invalid option: ${key} must be a string`);\n//                 } else if (!ALLOWED_TITLE_CASE_STYLES.includes(options.style)) {\n//                     throw new TypeError(`Invalid option: ${key} must be a string`);\n//                 }\n//                 continue;\n//             }\n//             if (key === 'replaceCasing') {\n//                 if (!Array.isArray(options.replaceCasing)) {\n//                     throw new TypeError(`Invalid option: ${key} must be an array`);\n//                 } else {\n//                     for (const term of options.replaceCasing) {\n//                         if (typeof term !== 'string') {\n//                             throw new TypeError(`Invalid option: ${key} must contain only strings`);\n//                         }\n//                     }\n//                 }\n//                 continue;\n//             }\n//             if (!TITLE_CASE_DEFAULT_OPTIONS.hasOwnProperty(key)) {\n//                 throw new TypeError(`Invalid option: ${key}`);\n//             }\n//             TitleCaseValidator.validateOption(key, options[key]);\n//         }\n//     }\n// }","import {\n    COMMON_ABBREVIATIONS,\n    CORRECT_TITLE_CASE,\n    replaceCasing,\n    CORRECT_PHRASE_CASE,\n}\nfrom \"./TitleCaseConsts.js\";\nimport TitleCaseHelper from \"./TitleCaseHelper.js\";\nclass TitleCaser {\n    constructor(options = {}) {\n        this.options = options;\n    }\n    toTitleCase(str) {\n        try {\n            if (typeof str !== 'string') throw new TypeError(\"Invalid input: input must be a string.\");\n            if (str.trim()\n                .length === 0) throw new TypeError(\"Invalid input: input must not be empty.\");\n            if (typeof this.options !== \"undefined\" && typeof this.options !== \"object\") throw new TypeError(\"Invalid options: options must be an object.\");\n            const {\n                style = \"ap\",\n                    neverCapitalize = []\n            } = this.options;\n            const ignoreList = [\"nl2br\", ...neverCapitalize];\n            const {\n                articles,\n                shortConjunctions,\n                shortPrepositions,\n                neverCapitalized,\n                replaceTerms\n            } = TitleCaseHelper.getTitleCaseOptions(this.options, COMMON_ABBREVIATIONS, replaceCasing);\n            const replaceTermsArray = replaceCasing.map(term => Object.keys(term)[0].toLowerCase());\n            const replaceTermsObj = Object.fromEntries(replaceCasing.map(term => [Object.keys(term)[0].toLowerCase(),\n                Object.values(term)[0]\n            ]));\n            let inputString = str.trim();\n            inputString = inputString.replace(/ {2,}/g, (match) => match.slice(0, 1));\n            inputString = inputString.replace(/<br\\s*[\\/]?>/gi, \"nl2br \");\n            const words = inputString.split(\" \");\n            const wordsInTitleCase = words.map((word, i) => {\n                switch (true) {\n                    case TitleCaseHelper.hasHtmlBreak(word):\n                        return word;\n                    case TitleCaseHelper.isWordIgnored(word, ignoreList):\n                        return word;\n                    case replaceTermsArray.includes(word.toLowerCase()):\n                        return replaceTermsObj[word.toLowerCase()];\n                    case TitleCaseHelper.isWordInArray(word, CORRECT_TITLE_CASE):\n                        return TitleCaseHelper.correctTerm(word, CORRECT_TITLE_CASE);\n                    case TitleCaseHelper.hasSuffix(word, style):\n                        return TitleCaseHelper.correctSuffix(word, CORRECT_TITLE_CASE);\n                    case TitleCaseHelper.hasHyphen(word):\n                        return TitleCaseHelper.correctTermHyphenated(word, style);\n                    case TitleCaseHelper.hasUppercaseIntentional(word):\n                        return word;\n                    case TitleCaseHelper.isShortWord(word, style) && i !== 0:\n                        return (i > 0 && TitleCaseHelper.endsWithSymbol(words[i - 1],\n                                [':', '?', '!', '.'])) ? word.charAt(0)\n                            .toUpperCase() + word.slice(1) : word.toLowerCase();\n                    case TitleCaseHelper.endsWithSymbol(word):\n                        const splitWord = word.split(/([.,\\/#!$%\\^&\\*;:{}=\\-_`~()])/g);\n                        const processedWords = splitWord.map((splitWord, j) => {\n                            if (TitleCaseHelper.isWordInArray(splitWord, CORRECT_TITLE_CASE)) return TitleCaseHelper.correctTerm(splitWord,\n                                CORRECT_TITLE_CASE);\n                            else return (j > 0 && TitleCaseHelper.endsWithSymbol(splitWord)) ? splitWord.charAt(0)\n                                .toUpperCase() + splitWord.slice(1) : splitWord.charAt(0)\n                                .toUpperCase() + splitWord.slice(1);\n                        });\n                        return processedWords.join(\"\");\n                    case TitleCaseHelper.startsWithSymbol(word):\n                        return !TitleCaseHelper.isWordInArray(word, CORRECT_TITLE_CASE) ? word : TitleCaseHelper.correctTerm(word);\n                    case TitleCaseHelper.hasRomanNumeral(word):\n                        return word.toUpperCase();\n                    case TitleCaseHelper.hasNumbers(word):\n                        return word;\n                    default:\n                        return word.charAt(0)\n                            .toUpperCase() + word.slice(1)\n                            .toLowerCase();\n                }\n            });\n            inputString = wordsInTitleCase.join(\" \");\n            for (const phrase of CORRECT_PHRASE_CASE) {\n                if (inputString.toLowerCase()\n                    .includes(phrase.toLowerCase())) {\n                    inputString = inputString.replace(new RegExp(phrase, 'gi'), phrase);\n                }\n            }\n            inputString = inputString.replace(/nl2br /gi, \"<br />\");\n            return inputString;\n        }\n        catch (error) {\n            throw new Error(error);\n        }\n    }\n}\nexport default TitleCaser;","import TitleCaser from './TitleCaser.js';\nString.prototype.toTitleCase = function(options) {\n    const titleCaser = new TitleCaser(options);\n    return titleCaser.toTitleCase(this);\n}"],"names":["COMMON_ABBREVIATIONS","CORRECT_TITLE_CASE","replaceCasing","TITLE_CASE_STYLES","Object","freeze","AP","APA","BRITISH","CHICAGO","NYT","WIKIPEDIA","ALLOWED_TITLE_CASE_STYLES","values","TITLE_CASE_DEFAULT_OPTIONS","ap","shortConjunctions","articles","shortPrepositions","neverCapitalized","apa","british","chicago","nyt","wikipedia","IGNORED_WORDS","ignorePhrases","CORRECT_PHRASE_CASE","ARR_UNIQUE_TERMS","ARR_CORRECT_CAPITALIZED","TitleCaseHelper","_classCallCheck","_createClass","key","value","getTitleCaseOptions","options","arguments","length","undefined","lowercaseWords","cacheKey","JSON","stringify","titleCaseOptionsCache","has","get","mergedOptions","_objectSpread","style","mergedArticles","concat","filter","word","index","array","indexOf","mergedShortConjunctions","mergedShortPrepositions","mergedReplaceTerms","_toConsumableArray","replaceTerms","map","_ref","_ref2","_slicedToArray","toLowerCase","result","set","isShortConjunction","wordLowerCase","includes","isArticle","isShortPreposition","_TitleCaseHelper$getT","isNeverCapitalized","isNeverCapitalizedCache","_TitleCaseHelper$getT2","isShortWord","TypeError","_typeof","Error","join","hasNumbers","test","hasUppercaseMultiple","count","i","hasUppercaseIntentional","slice","hasSuffix","suffix","endsWith","hasApostrophe","hasHyphen","hasRomanNumeral","romanNumeralRegex","hasHyphenRomanNumeral","parts","split","hasHtmlBreak","startsWithSymbol","firstChar","charAt","endsWithSymbol","symbols","Array","isArray","some","symbol","isWordIgnored","ignoredWords","trim","lowercasedWord","isWordInArray","targetWord","wordList","_getCorrectTitleCasing","getCorrectTitleCasing","_x","apply","toString","includeApostrophe","lowerCaseWord","uniqueTermsIndex","findIndex","w","correctCase","baseWord","titleCaseBase","toUpperCase","replaceTerm","replaceTermsObj","correctSuffix","correctTerms","lowerCasedWord","wordWithoutSuffix","matchingIndex","term","firstLetter","capitalizedWord","correctTerm","numParts","_loop","lowercasedPart","t","correctTermHyphenated","hyphenatedWords","capitalizeFirst","lowercaseRest","styleFunctions","processWord","processedWords","correctedWord","rootWord","substring","rootWordIndex","_defineProperty","Map","default","TitleCaser","toTitleCase","str","_this$options","_this$options$style","_this$options$neverCa","neverCapitalize","ignoreList","replaceTermsArray","keys","fromEntries","inputString","replace","match","words","wordsInTitleCase","splitWord","j","_iterator","_createForOfIteratorHelper","_step","s","n","done","phrase","RegExp","err","e","f","error","String","prototype","titleCaser"],"sourceRoot":""}